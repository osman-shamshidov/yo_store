from fastapi import FastAPI, Depends, HTTPException, UploadFile, File, Request, Response
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, FileResponse, StreamingResponse, RedirectResponse, JSONResponse
from sqlalchemy.orm import Session
from sqlalchemy import and_, func
from database import get_db
from models import Product, Category, CurrentPrice, ProductImage, Level2Description
from pydantic import BaseModel
from typing import List, Optional
from datetime import datetime
import json
import io
import pandas as pd
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from excel_handler import ExcelHandler
from manual_price_manager import manual_price_manager
from config import Config
import os

def normalize_model_key(model_key: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–ª—é—á –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ"""
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    model_key = model_key.lower()

    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return model_key

def normalize_color_name(color: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ"""
    # –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
    return color.lower().replace(' ', '-')

def get_product_images(product, db: Session):
    """–ü–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ProductImage"""
    images = []
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ specifications
    try:
        specs = json.loads(product.specifications) if product.specifications else {}
        images_data = specs.get('images', [])
        
        for img_data in images_data:
            if isinstance(img_data, dict):
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: {"url": "...", "alt": "..."}
                images.append(img_data["url"])
            elif isinstance(img_data, str):
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
                images.append(img_data)
                
    except json.JSONDecodeError:
        pass
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ specifications, –∏—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ ProductImage –ø–æ (level_2, color)
    if not images and product.level_2 and product.color:
        try:
            product_image = db.query(ProductImage).filter(
                ProductImage.level_2 == product.level_2,
                ProductImage.color == product.color
            ).first()
            
            if product_image and product_image.img_list:
                images_data = json.loads(product_image.img_list)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ double-encoded JSON (–µ—Å–ª–∏ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç—Ä–æ–∫—É)
                if isinstance(images_data, str):
                    images_data = json.loads(images_data)
                
                # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤
                if isinstance(images_data, list):
                    for img_data in images_data:
                        if isinstance(img_data, dict):
                            images.append(img_data["url"])
                        elif isinstance(img_data, str):
                            images.append(img_data)
        except (json.JSONDecodeError, TypeError):
            pass
    
    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç, –≤–µ—Ä–Ω–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    return images

def parse_images_from_string(images_str: str) -> List[str]:
    """–ü–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—ã–º–∏ –≤ JSON –º–∞—Å—Å–∏–≤"""
    if not images_str or not images_str.strip():
        return []
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
    image_urls = [url.strip() for url in str(images_str).split(',') if url.strip()]
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
    return json.dumps(image_urls)

app = FastAPI(title="Yo Store API", version="1.0.0")

# Mount static files
app.mount("/static", StaticFiles(directory="static"), name="static")

# --- Simple Admin Auth (cookie-based) ---
ADMIN_USERNAME = os.getenv('ADMIN_USERNAME', 'yo_admin')
ADMIN_PASSWORD = os.getenv('ADMIN_PASSWORD', 'yo_admin')
ADMIN_SESSION_TOKEN = "yo_admin_session_token_v1"

def is_admin_authenticated(request: Request) -> bool:
    token = request.cookies.get("admin_session")
    return token == ADMIN_SESSION_TOKEN

def require_admin(request: Request):
    if not is_admin_authenticated(request):
        raise HTTPException(status_code=401, detail="Unauthorized")
    return True

# Pydantic models for API
class ProductResponse(BaseModel):
    id: int
    sku: Optional[str] = None  # SKU —Ç–æ–ª—å–∫–æ —É –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –¥–ª—è –æ–±—â–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ = None
    name: str
    description: str = ""  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –∞ –Ω–µ None
    brand: str
    model: str
    category_name: str
    level_2: Optional[str] = None  # –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä "iPhone 16 Pro Max")
    image_url: str
    images: List[str] = []  # –ú–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    specifications: dict
    price: Optional[float] = 0.0
    old_price: Optional[float] = 0.0
    discount_percentage: Optional[float] = 0.0
    currency: str = "RUB"
    is_available: bool = True
    
    class Config:
        from_attributes = True

class CategoryResponse(BaseModel):
    id: int
    name: str
    description: str
    icon: str
    product_count: int
    parent_category_id: Optional[int] = None
    brand: Optional[str] = None
    is_subcategory: bool = False
    subcategories: List['CategoryResponse'] = []
    
    class Config:
        from_attributes = True

class ProductDetailResponse(BaseModel):
    id: int
    sku: str  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π SKU —Ç–æ–≤–∞—Ä–∞
    name: str
    description: str
    brand: str
    model: str
    category_name: str
    image_url: str
    images: List[str] = []  # –ú–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    specifications: dict
    price: float
    old_price: float
    discount_percentage: float
    currency: str
    is_available: bool
    created_at: str
    
    class Config:
        from_attributes = True

# --- Helpers ---
def ensure_category_exists(db: Session, level0: Optional[str], level1: Optional[str] = None, level2: Optional[str] = None) -> None:
    """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ Category –¥–ª—è —É—Ä–æ–≤–Ω–µ–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    try:
        # level_0 only
        if level0:
            exists_l0 = db.query(Category).filter(Category.level_0 == level0, Category.level_1 == None, Category.level_2 == None).first()
            if not exists_l0:
                db.add(Category(level_0=level0, level_1=None, level_2=None))
                db.flush()
        # level_1
        if level0 and level1:
            exists_l1 = db.query(Category).filter(Category.level_0 == level0, Category.level_1 == level1, Category.level_2 == None).first()
            if not exists_l1:
                db.add(Category(level_0=level0, level_1=level1, level_2=None))
                db.flush()
        # level_2
        if level0 and level1 and level2:
            exists_l2 = db.query(Category).filter(Category.level_0 == level0, Category.level_1 == level1, Category.level_2 == level2).first()
            if not exists_l2:
                db.add(Category(level_0=level0, level_1=level1, level_2=level2))
                db.flush()
    except Exception:
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        pass

# API Routes
@app.get("/")
async def root():
    return {"message": "Yo Store API", "version": "1.0.0"}

@app.get("/test-products")
async def test_products(db: Session = Depends(get_db)):
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    products = db.query(Product).limit(2).all()
    return [{"id": p.id, "sku": p.sku, "name": p.name, "level_0": p.level_0} for p in products]

@app.get("/categories")
async def get_categories(db: Session = Depends(get_db)):
    """Get all categories grouped by level_0"""
    # –ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Category —Å GROUP BY
    from sqlalchemy import func
    categories = db.query(
        Category.level_0,
        func.max(Category.description).label('description'),
        func.max(Category.icon).label('icon')
    ).filter(
        Category.level_0.isnot(None)
    ).group_by(Category.level_0).all()
    
    result = []
    for level_0, description, icon in categories:
        # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        product_count = db.query(Product).filter(Product.level_0 == level_0).count()
        
        result.append({
            "id": abs(hash(level_0)) % 1000000,  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π ID –∏–∑ —Ö—ç—à–∞
            "name": level_0,
            "description": description or f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {level_0}",
            "icon": icon or "üì¶",
            "product_count": product_count,
            "level_0": level_0
        })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤ –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ
    result.sort(key=lambda x: x["product_count"], reverse=True)
    
    return result

@app.get("/all-products", response_model=List[ProductResponse])
async def get_all_products(db: Session = Depends(get_db)):
    """Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"""
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
        results = db.query(Product, CurrentPrice).outerjoin(
            CurrentPrice, Product.sku == CurrentPrice.sku
        ).order_by(Product.level_0, Product.level_1, Product.level_2, Product.sku).all()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î")
        
        products = []
        for idx, result in enumerate(results):
            print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä {idx + 1}/{len(results)}: ID {result[0].id}")
            product = result[0]  # Product
            price = result[1]    # CurrentPrice –∏–ª–∏ None
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if price is None:
                product_price = 0.0
                product_old_price = 0.0
                product_discount = 0.0
                product_currency = "RUB"
            else:
                product_price = price.price if price.price is not None else 0.0
                product_old_price = price.old_price if price.old_price is not None else 0.0
                product_discount = price.discount_percentage if price.discount_percentage is not None else 0.0
                product_currency = price.currency if price.currency else "RUB"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images = get_product_images(product, db)
            image_url = images[0] if images else "/static/images/placeholder.jpg"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
            try:
                specifications = json.loads(product.specifications) if product.specifications else {}
            except json.JSONDecodeError:
                specifications = {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º description
            desc = ""
            if True:  # description –≤—Å–µ–≥–¥–∞ None, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª–µ —É–¥–∞–ª–µ–Ω–æ
                print(f"‚ö†Ô∏è  –¢–æ–≤–∞—Ä ID {product.id} –∏–º–µ–µ—Ç description=None, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É")
            
            products.append(ProductResponse(
                id=product.id,
                sku=product.sku,
                name=product.name,
                description=desc,
                brand=product.brand,
                model=product.level_2 or "",
                category_name=f"{product.level_0} / {product.level_1} / {product.level_2}" if product.level_1 and product.level_2 else product.level_0,
                level_2=product.level_2,
                image_url=image_url,
                images=images,
                specifications=specifications,
                price=product_price,
                old_price=product_old_price,
                discount_percentage=product_discount,
                currency=product_currency,
                is_available=True
            ))
        
        return products
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_all_products: {e}")
        return []

@app.get("/products", response_model=List[ProductResponse])
async def get_products(
    brand: Optional[str] = None,
    level0: Optional[str] = None,
    level1: Optional[str] = None,
    level2: Optional[str] = None,
    limit: int = 20,
    offset: int = 0,
    db: Session = Depends(get_db)
):
    """Get unique product models (grouped by level2) with optional hierarchical filters"""
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, –∑–∞—Ç–µ–º –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –≤ Python
    query = db.query(Product, CurrentPrice).outerjoin(
        CurrentPrice, Product.sku == CurrentPrice.sku
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filters = []
    
    if brand:
        filters.append(Product.brand == brand)
    if level0:
        filters.append(Product.level_0 == level0)
    if level1:
        filters.append(Product.level_1 == level1)
    if level2:
        filters.append(Product.level_2 == level2)
        
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if filters:
        query = query.filter(and_(*filters))
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–∫–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    subquery = db.query(
        func.min(Product.id).label('id')
    ).filter(*filters).group_by(Product.level_2, Product.brand).subquery()
    
    # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º–∏ –≥—Ä—É–ø–ø
    final_query = db.query(Product, CurrentPrice).outerjoin(
        CurrentPrice, Product.sku == CurrentPrice.sku
    ).outerjoin(subquery, Product.id == subquery.c.id).filter(
        subquery.c.id.isnot(None)
    ).order_by(Product.level_2, Product.id)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –∏ –æ—Ç—Å—Ç—É–ø
    results = final_query.offset(offset).limit(limit).all()
    
    products = []
    for result in results:
        product = result[0]  # Product


        price = result[1]    # CurrentPrice –∏–ª–∏ None
        
        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if price is None:
            price_obj = type('Price', (), {
                'price': 0.0,
                'old_price': 0.0,
                'discount_percentage': 0.0,
                'currency': 'RUB'
            })()
        else:
            price_obj = price
        
        try:
            specifications = json.loads(product.specifications) if product.specifications else {}
        except json.JSONDecodeError:
            specifications = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ level2_descriptions
        desc = ""
        level2_specs = {}
        if product.level_2:
            level2_desc = db.query(Level2Description).filter(Level2Description.level_2 == product.level_2).first()
            if level2_desc:
                desc = level2_desc.description or ""
                if level2_desc.details:
                    try:
                        level2_specs = json.loads(level2_desc.details) if isinstance(level2_desc.details, str) else level2_desc.details
                    except json.JSONDecodeError:
                        level2_specs = {}
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ level2_descriptions —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ specifications
        all_specifications = {**level2_specs, **specifications}
        
        images = get_product_images(product, db)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ level –ø–æ–ª–µ–π
        category_name = product.level_0 or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        if product.level_1:
            category_name += f" / {product.level_1}"
        if product.level_2:
            category_name += f" / {product.level_2}"
        
        products.append(ProductResponse(
            id=product.id,
            sku=product.sku,
            name=product.name,
            description=desc,
            brand=product.brand,
            model=product.level_2 or "",
            category_name=category_name,
            level_2=product.level_2,
            image_url=images[0] if images else '',
            images=images,
            specifications=specifications,
            price=price_obj.price,
            old_price=price_obj.old_price,
            discount_percentage=price_obj.discount_percentage,
            currency=price_obj.currency,
        ))
    
    return products

@app.get("/products/{model}/variants")
async def get_model_variants(model: str, db: Session = Depends(get_db)):
    """Get all variants and their prices for a specific model (level_2)"""
    import urllib.parse
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä
    model = urllib.parse.unquote(model)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç —Å –ø–æ–ª–Ω—ã–º–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏
    main_product = db.query(Product).filter(
        Product.level_2 == model,
        Product.specifications.like('%variants%')
    ).first()
    
    if main_product:
        # –ù–∞–π–¥–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        specifications = {}
        try:
            if main_product.specifications:
                specifications = json.loads(main_product.specifications)
        except json.JSONDecodeError:
            pass
        
        variants = []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ specifications.variants
        if 'variants' in specifications:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ —Ü–≤–µ—Ç—É (–≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
            sorted_variants = sorted(specifications['variants'], key=lambda x: x.get('specifications', {}).get('color', ''))
            
            for variant_info in sorted_variants:
                # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—É –¥–ª—è —ç—Ç–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ SKU
                variant_product = db.query(Product).filter(Product.sku == variant_info['sku']).first()
                price = None
                if variant_product:
                    price = db.query(CurrentPrice).filter(CurrentPrice.sku == variant_product.sku).first()
                
                variant_specs = variant_info.get('specifications', {})
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ü–≤–µ—Ç–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                variant_color = variant_specs.get('color', '')
                variant_color_normalized = variant_color.lower().replace(' ', '-')
                variant_images = []
                
                if 'images' in specifications:
                    for img_info in specifications['images']:
                        if isinstance(img_info, dict) and 'color' in img_info:
                            img_color = img_info.get('color', '').lower()
                            if img_color == variant_color_normalized:
                                variant_images.append(img_info.get('url', ''))
                        elif isinstance(img_info, str):
                            # –ü—Ä—è–º–æ–π URL - –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–≤–µ—Ç –∏–∑ –ø—É—Ç–∏
                            img_path = img_info.lower()
                            if variant_color_normalized in img_path:
                                variant_images.append(img_info)
                
                variant_data = {
                    "sku": variant_info['sku'],
                    "name": variant_info['name'],
                    "price": price.price if price else 0.0,
                    "old_price": price.old_price if price else 0.0,
                    "discount_percentage": price.discount_percentage if price else 0.0,
                    "currency": price.currency if price else "RUB",
                    "stock": variant_info.get('stock', 0),
                    "is_available": variant_info.get('is_available', True),
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                    "color": variant_specs.get('color', ''),
                    "memory": variant_specs.get('memory', ''),
                    "sim_type": variant_specs.get('sim_type', ''),
                    
                    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞
                    "images": variant_images,
                    "main_image": variant_images[0] if variant_images else ""
                }
                
                variants.append(variant_data)
        
        return {
            "model": model,
            "variants": variants,
            "total_variants": len(variants)
        }
    
    # Fallback: –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç, –Ω–∞–π–¥–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    variants_query = db.query(Product, CurrentPrice).outerjoin(
        CurrentPrice, Product.sku == CurrentPrice.sku
    ).filter(Product.level_2 == model).order_by(Product.specifications)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ specifications
    
    variants = []
    for result in variants_query.all():
        product = result[0]
        price = result[1]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        specifications = {}
        try:
            if product.specifications:
                specifications = json.loads(product.specifications)
        except json.JSONDecodeError:
            pass
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = get_product_images(product, db)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—è –∏–∑ –º–æ–¥–µ–ª–∏ Product –Ω–∞–ø—Ä—è–º—É—é, fallback –Ω–∞ specifications
        color = product.color if product.color else specifications.get('color', '')
        memory = product.disk if product.disk else specifications.get('disk', specifications.get('memory', ''))
        sim_type = product.sim_config if product.sim_config else specifications.get('sim_config', specifications.get('sim_type', ''))
        
        variant_data = {
            "sku": product.sku,
            "name": product.name,
            "price": price.price if price else 0.0,
            "old_price": price.old_price if price else 0.0,
            "discount_percentage": price.discount_percentage if price else 0.0,
            "currency": price.currency if price else "RUB",
            "stock": product.stock,
            "is_available": product.is_available,
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (—Ü–≤–µ—Ç, –ø–∞–º—è—Ç—å, SIM)
            "color": color,
            "memory": memory,
            "sim_type": sim_type,
            
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–æ–¥–∏–Ω —Ü–≤–µ—Ç –æ–±—ã—á–Ω–æ)
            "images": images,
            "main_image": images[0] if images else ""
        }
        
        variants.append(variant_data)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ —Ü–≤–µ—Ç—É –¥–ª—è fallback —Å–ª—É—á–∞—è
    variants.sort(key=lambda x: x.get('color', ''))
    
    return {
        "model": model,
        "variants": variants,
        "total_variants": len(variants)
    }

@app.get("/products/{product_id}", response_model=ProductDetailResponse)
async def get_product(product_id: int, db: Session = Depends(get_db)):
    """Get detailed product information"""
    result = db.query(Product, CurrentPrice).join(
        CurrentPrice, Product.sku == CurrentPrice.sku
    ).filter(
        Product.id == product_id
    ).first()
    
    if not result:
        raise HTTPException(status_code=404, detail="Product not found")
    
    product, price = result
    
    try:
        specifications = json.loads(product.specifications) if product.specifications else {}
    except json.JSONDecodeError:
        specifications = {}
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ level2_descriptions
    desc = ""
    level2_specs = {}
    if product.level_2:
        level2_desc = db.query(Level2Description).filter(Level2Description.level_2 == product.level_2).first()
        if level2_desc:
            desc = level2_desc.description or ""
            if level2_desc.details:
                try:
                    level2_specs = json.loads(level2_desc.details) if isinstance(level2_desc.details, str) else level2_desc.details
                except json.JSONDecodeError:
                    level2_specs = {}
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ level2_descriptions —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ specifications
    all_specifications = {**level2_specs, **specifications}
    
    images = get_product_images(product, db)
    
    return ProductDetailResponse(
        id=product.id,
        sku=product.sku,
        name=product.name,
        description=desc,
        brand=product.brand,
        model=product.level_2 or "",
        category_name=product.level_0 or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        image_url=images[0] if images else '',
        images=images,
        specifications=all_specifications,
        price=price.price,
        old_price=price.old_price,
        discount_percentage=price.discount_percentage,
        currency=price.currency,
        is_available=product.is_available,
        created_at=product.created_at.isoformat()
    )

@app.get("/search")
async def search_products(
    q: str,
    limit: int = 20,
    db: Session = Depends(get_db)
):
    """Search products by name, brand, or level_2 - returns unique models only"""
    search_term = f"%{q}%"
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_filters = [
        Product.is_available == True,
        (
            Product.name.ilike(search_term) |
            Product.brand.ilike(search_term) |
            Product.level_2.ilike(search_term)
        )
    ]
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ —Ç–∞–∫—É—é –∂–µ –ª–æ–≥–∏–∫—É –∫–∞–∫ –≤ get_products - –ø–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
    subquery = db.query(
        func.min(Product.id).label('id')
    ).filter(*search_filters).group_by(Product.level_2, Product.brand).subquery()
    
    # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º–∏ –≥—Ä—É–ø–ø
    final_query = db.query(Product, CurrentPrice).outerjoin(
        CurrentPrice, Product.sku == CurrentPrice.sku
    ).filter(
        Product.id == subquery.c.id
    ).order_by(Product.level_2, Product.id)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç
    results = final_query.limit(limit).all()
    
    products = []
    for product, price in results:
        try:
            specifications = json.loads(product.specifications) if product.specifications else {}
        except json.JSONDecodeError:
            specifications = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ level2_descriptions
        desc = ""
        level2_specs = {}
        if product.level_2:
            level2_desc = db.query(Level2Description).filter(Level2Description.level_2 == product.level_2).first()
            if level2_desc:
                desc = level2_desc.description or ""
                if level2_desc.details:
                    try:
                        level2_specs = json.loads(level2_desc.details) if isinstance(level2_desc.details, str) else level2_desc.details
                    except json.JSONDecodeError:
                        level2_specs = {}
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ level2_descriptions —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ specifications
        all_specifications = {**level2_specs, **specifications}
        
        images = get_product_images(product, db)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ level –ø–æ–ª–µ–π
        category_name = product.level_0 or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        if product.level_1:
            category_name += f" / {product.level_1}"
        if product.level_2:
            category_name += f" / {product.level_2}"
        
        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ get_products)
        if price is None:
            price_obj = type('Price', (), {
                'price': 0.0,
                'old_price': 0.0,
                'discount_percentage': 0.0,
                'currency': 'RUB'
            })()
        else:
            price_obj = price
        
        products.append(ProductResponse(
            id=product.id,
            sku=product.sku,
            name=product.name,
            description=desc,
            brand=product.brand,
            model=product.level_2 or "",
            category_name=category_name,
            level_2=product.level_2,
            image_url=images[0] if images else '',
            images=images,
            specifications=specifications,
            price=price_obj.price,
            old_price=price_obj.old_price,
            discount_percentage=price_obj.discount_percentage,
            currency=price_obj.currency,
        ))
    
    return products

@app.get("/webapp")
async def webapp():
    """Serve the web app"""
    return FileResponse("webapp.html")

@app.get("/login")
async def login_page():
    return FileResponse("login.html")

@app.post("/login")
async def login(request: Request, response: Response):
    try:
        body = await request.json()
    except Exception:
        body = {}
    username = (body.get("username") or "").strip()
    password = (body.get("password") or "").strip()

    if username == ADMIN_USERNAME and password == ADMIN_PASSWORD:
        # Set secure httpOnly cookie
        response = JSONResponse({"success": True, "message": "Authenticated"})
        response.set_cookie(
            key="admin_session",
            value=ADMIN_SESSION_TOKEN,
            httponly=True,
            max_age=60 * 60 * 8,  # 8 hours
            samesite="lax"
        )
        return response
    raise HTTPException(status_code=401, detail="Invalid credentials")

@app.post("/logout")
async def logout(response: Response):
    res = JSONResponse({"success": True})
    res.delete_cookie("admin_session")
    return res

@app.get("/admin")
async def admin(request: Request):
    """Serve the admin panel (protected)"""
    if not is_admin_authenticated(request):
        return RedirectResponse(url="/login", status_code=302)
    return FileResponse("admin.html")

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "timestamp": datetime.utcnow().isoformat()}

# Excel Management API
@app.get("/api/excel/template/products")
async def download_products_template():
    """–°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω Excel —Ñ–∞–π–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
    excel_handler = ExcelHandler()
    template_data = excel_handler.create_products_template()
    
    return StreamingResponse(
        io.BytesIO(template_data),
        media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        headers={"Content-Disposition": "attachment; filename=products_template.xlsx"}
    )

@app.get("/api/excel/template/prices")
async def download_prices_template():
    """–°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω Excel —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω"""
    excel_handler = ExcelHandler()
    template_data = excel_handler.create_prices_template()
    
    return StreamingResponse(
        io.BytesIO(template_data),
        media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        headers={"Content-Disposition": "attachment; filename=prices_template.xlsx"}
    )

@app.post("/api/excel/import/products")
async def import_products_from_excel(file: UploadFile = File(...), db: Session = Depends(get_db)):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    if not file.filename.endswith(('.xlsx', '.xls')):
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls)")
    
    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        file_content = await file.read()
        
        # –ü–∞—Ä—Å–∏–º Excel —Ñ–∞–π–ª
        excel_handler = ExcelHandler()
        products_data = excel_handler.parse_products_excel(file_content)
        
        # –¢–∞–∫–∂–µ –ø–∞—Ä—Å–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –ª–∏—Å—Ç "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        images_data = []
        try:
            images_data = excel_handler.parse_images_excel(file_content)
        except Exception as e:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        added_count = 0
        errors = []
        
        for i, product_data in enumerate(products_data):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è level0
                if not product_data.get('level0'):
                    errors.append(f"–¢–æ–≤–∞—Ä {i+1}: –ù–µ —É–∫–∞–∑–∞–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (level0)")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SKU
                if not product_data.get('brand') or not product_data.get('level2'):
                    errors.append(f"–¢–æ–≤–∞—Ä {i+1}: –ù–µ —É–∫–∞–∑–∞–Ω –±—Ä–µ–Ω–¥ –∏–ª–∏ –º–æ–¥–µ–ª—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SKU")
                    continue
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π SKU –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
                if product_data.get('sku'):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å SKU
                    existing = db.query(Product).filter(Product.sku == product_data['sku']).first()
                    if existing:
                        errors.append(f"–¢–æ–≤–∞—Ä {i+1}: SKU '{product_data['sku']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        continue
                    sku = product_data['sku']
                else:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π SKU –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏ timestamp
                    import time
                    timestamp = int(time.time() * 1000) % 100000  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ü–∏—Ñ—Ä timestamp
                    sku = f"{product_data['brand'][:3].upper()}{product_data['level2'][:5].upper()}{timestamp}"
                
                # –°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä
                parsed_images = parse_images_from_string(product_data['image_url'])
                
                # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å specifications –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                specs = dict(product_data.get('specifications') or {})
                if product_data.get('color'):
                    specs['color'] = product_data['color']
                if product_data.get('ram'):
                    specs['ram'] = product_data['ram']
                if product_data.get('disk'):
                    specs['disk'] = product_data['disk']
                if product_data.get('sim_config'):
                    specs['sim_config'] = product_data['sim_config']

                db_product = Product(
                    sku=sku,
                    name=product_data['name'],
                    level_0=product_data['level0'],
                    level_1=product_data.get('level1'),
                    level_2=product_data.get('level2'),
                    brand=product_data['brand'],
                    specifications=json.dumps(specs),
                    stock=product_data['stock'],
                    is_available=True
                )
                
                db.add(db_product)
                db.flush()  # –ü–æ–ª—É—á–∏—Ç—å ID

                # Ensure categories exist
                ensure_category_exists(db, product_data.get('level0'), product_data.get('level1'), product_data.get('level2'))
                
                # –°–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
                db_price = CurrentPrice(
                    sku=sku,
                    price=product_data['price'],
                    old_price=product_data['price'],
                    discount_percentage=0.0,
                    currency=product_data['currency'],
                    updated_at=datetime.utcnow()
                )
                
                db.add(db_price)
                
                # –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ ProductImage –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if parsed_images and product_data.get('level2') and product_data.get('color'):
                    product_image = ProductImage(
                        level_2=product_data['level2'],
                        color=product_data['color'],
                        img_list=json.dumps(parsed_images)
                    )
                    db.add(product_image)
                
                added_count += 1
                
            except Exception as e:
                errors.append(f"–¢–æ–≤–∞—Ä {i+1}: {str(e)}")
        
        db.commit()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        images_added = 0
        images_updated = 0
        images_errors = []
        
        for image_data in images_data:
            try:
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                existing_image = db.query(ProductImage).filter(
                    ProductImage.level_2 == image_data['level_2'],
                    ProductImage.color == image_data['color']
                ).first()
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ JSON
                img_list_json = json.dumps(image_data['img_list'])
                
                if existing_image:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    existing_image.img_list = img_list_json
                    images_updated += 1
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    new_image = ProductImage(
                        level_2=image_data['level_2'],
                        color=image_data['color'],
                        img_list=img_list_json
                    )
                    db.add(new_image)
                    images_added += 1
                    
            except Exception as e:
                images_errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π {image_data['level_2']} - {image_data['color']}: {str(e)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if images_data:
            db.commit()
        
        return {
            "message": "–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
            "added": added_count,
            "errors": errors,
            "total_processed": len(products_data),
            "images_added": images_added,
            "images_updated": images_updated,
            "images_errors": images_errors
        }
        
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}")

@app.post("/api/excel/import/prices")
async def import_prices_from_excel(file: UploadFile = File(...), db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    if not file.filename.endswith(('.xlsx', '.xls')):
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls)")
    
    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        file_content = await file.read()
        
        # –ü–∞—Ä—Å–∏–º Excel —Ñ–∞–π–ª
        excel_handler = ExcelHandler()
        prices_data = excel_handler.parse_prices_excel(file_content)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ä—É—á–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä
        updated_count = 0
        errors = []
        
        for i, price_data in enumerate(prices_data):
            try:
                success = manual_price_manager.update_price_from_excel_data(price_data, db)
                if success:
                    updated_count += 1
                else:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {i+1}: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É")
            except Exception as e:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {i+1}: {str(e)}")
        
        db.commit()
        
        return {
            "message": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
            "updated": updated_count,
            "errors": errors,
            "total_processed": len(prices_data)
        }
        
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω: {str(e)}")

@app.post("/api/excel/update-or-create/products")
async def update_or_create_products_from_excel(file: UploadFile = File(...), db: Session = Depends(get_db)):
    """–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ SKU) –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö"""
    if not file.filename.endswith(('.xlsx', '.xls')):
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls)")
    
    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        file_content = await file.read()
        
        # –ü–∞—Ä—Å–∏–º Excel —Ñ–∞–π–ª
        excel_handler = ExcelHandler()
        products_data = excel_handler.parse_products_excel(file_content)
        
        # –¢–∞–∫–∂–µ –ø–∞—Ä—Å–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –ª–∏—Å—Ç "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        images_data = []
        try:
            images_data = excel_handler.parse_images_excel(file_content)
        except Exception as e:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        
        added_count = 0
        updated_count = 0
        errors = []
        
        for i, product_data in enumerate(products_data):
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SKU –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
                if not product_data.get('sku'):
                    import time
                    timestamp = int(time.time() * 1000) % 100000
                    brand_part = product_data.get('brand', 'UNK')[:3].upper()
                    model_part = product_data.get('level_2', 'UNK')[:5].upper()
                    product_data['sku'] = f"{brand_part}{model_part}{timestamp}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º SKU
                existing_product = db.query(Product).filter(Product.sku == product_data['sku']).first()
                
                if existing_product:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
                    existing_product.name = product_data['name']
                    # existing_product.description = product_data.get('description', '')  # –ø–æ–ª–µ —É–¥–∞–ª–µ–Ω–æ
                    existing_product.level_0 = product_data['level0']
                    existing_product.level_1 = product_data.get('level1', '')
                    existing_product.level_2 = product_data.get('level2', '')
                    existing_product.brand = product_data.get('brand', '')
                    existing_product.stock = product_data.get('stock', 0)
                    # Ensure categories exist for updated levels
                    ensure_category_exists(db, product_data.get('level0'), product_data.get('level1'), product_data.get('level2'))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ specifications JSON
                    try:
                        existing_specs = json.loads(existing_product.specifications) if existing_product.specifications else {}
                    except json.JSONDecodeError:
                        existing_specs = {}
                    for key in ['color', 'disk', 'ram', 'sim_config']:
                        if product_data.get(key):
                            existing_specs[key] = product_data[key]
                    existing_product.specifications = json.dumps(existing_specs)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã (–≤ —Ç–∞–±–ª–∏—Ü–µ ProductImage)
                    if product_data.get('image_url') and existing_product.level_2 and existing_product.color:
                        parsed_images = parse_images_from_string(product_data['image_url'])
                        img_list_json = json.dumps(parsed_images) if parsed_images else '[]'
                        
                        # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ ProductImage
                        product_image = db.query(ProductImage).filter(
                            ProductImage.level_2 == existing_product.level_2,
                            ProductImage.color == existing_product.color
                        ).first()
                        
                        if product_image:
                            product_image.img_list = img_list_json
                        else:
                            product_image = ProductImage(
                                level_2=existing_product.level_2,
                                color=existing_product.color,
                                img_list=img_list_json
                            )
                            db.add(product_image)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
                    current_price = db.query(CurrentPrice).filter(CurrentPrice.sku == product_data['sku']).first()
                    if current_price:
                        current_price.price = product_data['price']
                        current_price.currency = product_data.get('currency', 'RUB')
                        current_price.last_updated = datetime.now()
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
                        new_price = CurrentPrice(
                            sku=product_data['sku'],
                            price=product_data['price'],
                            old_price=product_data['price'],
                            currency=product_data.get('currency', 'RUB')
                        )
                        db.add(new_price)
                    
                    updated_count += 1
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                    parsed_images = parse_images_from_string(product_data.get('image_url', ''))
                    
                    specs = dict(product_data.get('specifications') or {})
                    if product_data.get('color'):
                        specs['color'] = product_data['color']
                    if product_data.get('ram'):
                        specs['ram'] = product_data['ram']
                    if product_data.get('disk'):
                        specs['disk'] = product_data['disk']
                    if product_data.get('sim_config'):
                        specs['sim_config'] = product_data['sim_config']

                    db_product = Product(
                        sku=product_data['sku'],
                        name=product_data['name'],
                        level_0=product_data['level0'],
                        level_1=product_data.get('level1', ''),
                        level_2=product_data.get('level2', ''),
                        brand=product_data.get('brand', ''),
                        stock=product_data.get('stock', 0),
                        specifications=json.dumps(specs),
                        is_available=True
                    )
                    db.add(db_product)
                    # Ensure categories exist
                    ensure_category_exists(db, product_data.get('level0'), product_data.get('level1'), product_data.get('level2'))
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É
                    db_price = CurrentPrice(
                        sku=product_data['sku'],
                        price=product_data['price'],
                        old_price=product_data['price'],
                        currency=product_data.get('currency', 'RUB')
                    )
                    db.add(db_price)
                    
                    # –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ ProductImage –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if parsed_images and product_data.get('level_2') and product_data.get('color'):
                        product_image = ProductImage(
                            level_2=product_data['level_2'],
                            color=product_data['color'],
                            img_list=json.dumps(parsed_images)
                        )
                        db.add(product_image)
                    
                    added_count += 1
                    
            except Exception as e:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {i+2}: {str(e)}")
        
        db.commit()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        images_added = 0
        images_updated = 0
        images_errors = []
        
        for image_data in images_data:
            try:
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                existing_image = db.query(ProductImage).filter(
                    ProductImage.level_2 == image_data['level_2'],
                    ProductImage.color == image_data['color']
                ).first()
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ JSON
                img_list_json = json.dumps(image_data['img_list'])
                
                if existing_image:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    existing_image.img_list = img_list_json
                    images_updated += 1
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    new_image = ProductImage(
                        level_2=image_data['level_2'],
                        color=image_data['color'],
                        img_list=img_list_json
                    )
                    db.add(new_image)
                    images_added += 1
                    
            except Exception as e:
                images_errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π {image_data['level_2']} - {image_data['color']}: {str(e)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if images_data:
            db.commit()
        
        return {
            "success": True,
            "message": f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count}",
            "added": added_count,
            "updated": updated_count,
            "errors": errors,
            "total_processed": len(products_data),
            "images_added": images_added,
            "images_updated": images_updated,
            "images_errors": images_errors
        }
        
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

@app.post("/api/excel/import/images")
async def import_images_from_excel(file: UploadFile = File(...), db: Session = Depends(get_db)):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    if not file.filename.endswith(('.xlsx', '.xls')):
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls)")
    
    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        file_content = await file.read()
        
        # –ü–∞—Ä—Å–∏–º Excel —Ñ–∞–π–ª
        excel_handler = ExcelHandler()
        images_data = excel_handler.parse_images_excel(file_content)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        added_count = 0
        updated_count = 0
        errors = []
        
        for image_data in images_data:
            try:
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                existing_image = db.query(ProductImage).filter(
                    ProductImage.level_2 == image_data['level_2'],
                    ProductImage.color == image_data['color']
                ).first()
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ JSON
                img_list_json = json.dumps(image_data['img_list'])
                
                if existing_image:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    existing_image.img_list = img_list_json
                    updated_count += 1
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    new_image = ProductImage(
                        level_2=image_data['level_2'],
                        color=image_data['color'],
                        img_list=img_list_json
                    )
                    db.add(new_image)
                    added_count += 1
                    
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {image_data['level_2']} - {image_data['color']}: {str(e)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        
        return {
            "success": True,
            "message": f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count}",
            "added": added_count,
            "updated": updated_count,
            "errors": errors,
            "total_processed": len(images_data)
        }
        
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

@app.get("/download-price-template")
async def download_price_template(db: Session = Depends(get_db)):
    """–°–∫–∞—á–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π —à–∞–±–ª–æ–Ω Excel –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω: SKU - –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ - —Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞"""
    try:
        from io import BytesIO
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã —Å –∏—Ö SKU –∏ —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏
        products = db.query(Product, CurrentPrice).outerjoin(
            CurrentPrice, Product.sku == CurrentPrice.sku
        ).filter(Product.is_available == True).limit(50).all()
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
        data = []
        if products:
            for product, price in products:
                data.append({
                    'SKU': product.sku,
                    '–ù–æ–≤–∞—è —Ü–µ–Ω–∞': price.price if price else 0.0,
                    '–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞': price.old_price if price and price.old_price else (price.price if price else 0.0)
                })
        else:
            # –ü—Ä–∏–º–µ—Ä—ã –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤
            data = [
                {'SKU': 'APPIP16', '–ù–æ–≤–∞—è —Ü–µ–Ω–∞': 59990, '–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞': 69990},
                {'SKU': 'APPIP16PRO', '–ù–æ–≤–∞—è —Ü–µ–Ω–∞': 89990, '–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞': 99990},
                {'SKU': 'SAM-GALAXY-S24', '–ù–æ–≤–∞—è —Ü–µ–Ω–∞': 79990, '–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞': 89990}
            ]
        
        df = pd.DataFrame(data)
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='–¶–µ–Ω—ã')
            
            # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
            workbook = writer.book
            worksheet = writer.sheets['–¶–µ–Ω—ã']
            
            # –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            header_font = openpyxl.styles.Font(bold=True, color="FFFFFF")
            header_fill = openpyxl.styles.PatternFill(start_color="366092", end_color="366092", fill_type="solid")
            
            for cell in worksheet[1]:
                cell.font = header_font
                cell.fill = header_fill
                cell.alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center")
        
        output.seek(0)
        
        return StreamingResponse(
            BytesIO(output.read()),
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            headers={"Content-Disposition": "attachment; filename=prices_template.xlsx"}
        )
        
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {str(e)}")

@app.post("/import-prices")
async def import_prices_simple(file: UploadFile = File(...), db: Session = Depends(get_db)):
    """–ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∏–∑ Excel: SKU - –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ - —Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞"""
    if not file.filename.endswith(('.xlsx', '.xls')):
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls)")
    
    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        file_content = await file.read()
        
        # –ü–∞—Ä—Å–∏–º –∫–∞–∫ DataFrame
        df = pd.read_excel(io.BytesIO(file_content))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        if len(df.columns) < 3:
            raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 –∫–æ–ª–æ–Ω–∫–∏: SKU, –ù–æ–≤–∞—è —Ü–µ–Ω–∞, –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–æ–ª–æ–Ω–∫–∏
        sku_col = df.columns[0]
        new_price_col = df.columns[1] 
        old_price_col = df.columns[2]
        
        updated_count = 0
        errors = []
        not_found = []
        
        for index, row in df.iterrows():
            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if pd.isna(row[sku_col]) or pd.isna(row[new_price_col]):
                    continue
                
                sku = str(row[sku_col]).strip()
                try:
                    new_price = float(row[new_price_col])
                except:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {index + 2}: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–≤–æ–π —Ü–µ–Ω—ã")
                    continue
                
                try:
                    old_price = float(row[old_price_col]) if not pd.isna(row[old_price_col]) else new_price
                except:
                    old_price = new_price
                
                # –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –ø–æ SKU
                product = db.query(Product).filter(Product.sku == sku).first()
                
                if not product:
                    not_found.append(f"–°—Ç—Ä–æ–∫–∞ {index + 2}: –¢–æ–≤–∞—Ä —Å SKU '{sku}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    continue
                
                # –û–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ü–µ–Ω—É
                current_price = db.query(CurrentPrice).filter(CurrentPrice.sku == product.sku).first()
                
                if current_price:
                    # –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ü–µ–Ω—É
                    current_price.price = new_price
                    current_price.old_price = old_price
                    current_price.discount_percentage = ((old_price - new_price) / old_price * 100) if old_price > new_price else 0
                else:
                    # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ü–µ–Ω—É
                    new_price_obj = CurrentPrice(
                        product_id=product.id,
                        price=new_price,
                        old_price=old_price,
                        discount_percentage=((old_price - new_price) / old_price * 100) if old_price > new_price else 0,
                        currency='RUB'
                    )
                    db.add(new_price_obj)
                
                updated_count += 1
                
            except Exception as e:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {index + 2}: {str(e)}")
        
        db.commit()
        
        return {
            "message": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
            "updated": updated_count,
            "errors": errors,
            "not_found": not_found,
            "total_processed": len(df)
        }
        
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω: {str(e)}")

@app.get("/api/excel/export/products")
async def export_products_to_excel(db: Session = Depends(get_db)):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞"""
    try:
        from openpyxl import Workbook
        from openpyxl.styles import Font, PatternFill, Alignment
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏
        results = db.query(Product, CurrentPrice).outerjoin(
            CurrentPrice, Product.sku == CurrentPrice.sku
        ).all()
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        wb = Workbook()
        ws = wb.active
        ws.title = "–¢–æ–≤–∞—Ä—ã"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ (—Ç–µ –∂–µ —á—Ç–æ –≤ —à–∞–±–ª–æ–Ω–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞, –Ω–æ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
        headers = [
            'SKU —Ç–æ–≤–∞—Ä–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*', '–û–ø–∏—Å–∞–Ω–∏–µ', 
            '–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (level0)*', '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è (level1)*', '–î–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (level2)*',
            '–ë—Ä–µ–Ω–¥', '–¶–µ–Ω–∞*', '–í–∞–ª—é—Ç–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ',
            '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (JSON)'
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–æ —Å—Ç–∏–ª–µ–º
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = Font(bold=True, color="FFFFFF")
            cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
            cell.alignment = Alignment(horizontal="center", vertical="center")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
        for row_idx, (product, price) in enumerate(results, 2):
            # –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            try:
                specifications = json.loads(product.specifications) if product.specifications else {}
                specs_str = json.dumps(specifications, ensure_ascii=False) if specifications else ''
            except:
                specs_str = ''
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã–º–∏ (–±–µ–∑ —Å—Ç–æ–ª–±—Ü–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
            ws.cell(row=row_idx, column=1, value=product.sku or '')
            ws.cell(row=row_idx, column=2, value=product.name or '')
            ws.cell(row=row_idx, column=3, value='')  # description –ø–æ–ª–µ —É–¥–∞–ª–µ–Ω–æ
            ws.cell(row=row_idx, column=4, value=product.level_0 or '')
            ws.cell(row=row_idx, column=5, value=product.level_1 or '')
            ws.cell(row=row_idx, column=6, value=product.level_2 or '')
            ws.cell(row=row_idx, column=7, value=product.brand or '')
            ws.cell(row=row_idx, column=8, value=price.price if price else 0.0)
            ws.cell(row=row_idx, column=9, value=price.currency if price else 'RUB')
            ws.cell(row=row_idx, column=10, value=product.stock or 0)
            ws.cell(row=row_idx, column=11, value=specs_str)
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column_letter].width = adjusted_width
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        images_ws = wb.create_sheet("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        images_headers = [
            '–ú–æ–¥–µ–ª—å (level_2)*', '–¶–≤–µ—Ç*', 'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)*'
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        for col, header in enumerate(images_headers, 1):
            cell = images_ws.cell(row=1, column=col, value=header)
            cell.font = Font(bold=True, color="FFFFFF")
            cell.fill = PatternFill(start_color="27ae60", end_color="27ae60", fill_type="solid")
            cell.alignment = Alignment(horizontal="center", vertical="center")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ProductImage
        product_images = db.query(ProductImage).all()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        for row_idx, product_image in enumerate(product_images, 2):
            try:
                # –ü–∞—Ä—Å–∏–º JSON —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                images_data = json.loads(product_image.img_list) if product_image.img_list else []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ images_data —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
                if images_data and isinstance(images_data[0], dict):
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –∏–∑–≤–ª–µ–∫–∞–µ–º URL
                    image_urls = ', '.join([img.get('url', '') for img in images_data if img.get('url')])
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
                    image_urls = ', '.join(images_data) if images_data else ''
                
                images_ws.cell(row=row_idx, column=1, value=product_image.level_2 or '')
                images_ws.cell(row=row_idx, column=2, value=product_image.color or '')
                images_ws.cell(row=row_idx, column=3, value=image_urls)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è {product_image.level_2} - {product_image.color}: {e}")
                continue
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        for column in images_ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 80)
            images_ws.column_dimensions[column_letter].width = adjusted_width
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
        output = io.BytesIO()
        wb.save(output)
        output.seek(0)
        
        return StreamingResponse(
            output,
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            headers={"Content-Disposition": "attachment; filename=current_products.xlsx"}
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")

# Additional Price Management API
@app.get("/api/prices/current")
async def get_current_prices():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã"""
    try:
        prices = manual_price_manager.get_all_current_prices()
        return {
            "message": "–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã",
            "prices": prices,
            "total": len(prices)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: {str(e)}")

@app.get("/api/prices/history/{product_id}")
async def get_price_history(product_id: int, limit: int = 10):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω —Ç–æ–≤–∞—Ä–∞"""
    try:
        history = manual_price_manager.get_price_history(product_id, limit)
        return {
            "message": f"–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω —Ç–æ–≤–∞—Ä–∞ {product_id}",
            "product_id": product_id,
            "history": history,
            "total": len(history)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω: {str(e)}")

@app.post("/api/prices/update-single")
async def update_single_price(
    product_id: int,
    new_price: float,
    currency: str = "RUB",
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        price_data = {
            'product_id': product_id,
            'price': new_price,
            'currency': currency
        }
        
        success = manual_price_manager.update_price_from_excel_data(price_data, db)
        
        if success:
            db.commit()
            return {
                "message": "–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
                "product_id": product_id,
                "new_price": new_price,
                "currency": currency
            }
        else:
            raise HTTPException(status_code=400, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É")
            
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã: {str(e)}")

@app.get("/product-images/{model_key}/{color}")
async def get_product_images_by_color(model_key: str, color: str, db: Session = Depends(get_db)):
    """Get images for a specific product color from ProductImage table"""
    import os
    import urllib.parse
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    model_key = urllib.parse.unquote(model_key)
    color = urllib.parse.unquote(color)
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ë–î
    # model_key –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ "iphone17pro", —Ç–∞–∫ –∏ "iPhone 17 Pro"
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –ë–î –ø–æ —Ä–∞–∑–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—â–µ–º –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ level_2
    product_image = db.query(ProductImage).filter(
        ProductImage.level_2 == model_key,
        ProductImage.color == color
    ).first()
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if not product_image:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–π level_2 –∏ color (case-insensitive)
        all_images = db.query(ProductImage).all()
        for img in all_images:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º level_2: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            img_level2_normalized = img.level_2.lower().replace(' ', '').replace('-', '')
            model_key_normalized = model_key.lower().replace(' ', '').replace('-', '')
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º color: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            img_color_normalized = img.color.lower().replace(' ', '').replace('-', '')
            color_normalized = color.lower().replace(' ', '').replace('-', '')
            
            if (img_level2_normalized == model_key_normalized and
                img_color_normalized == color_normalized):
                product_image = img
                break
    
    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –≤ –ë–î - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –±–∞–∑—ã
    if product_image and product_image.img_list:
        try:
            images_data = json.loads(product_image.img_list)
            image_paths = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            for img_data in images_data:
                if isinstance(img_data, dict):
                    # –§–æ—Ä–º–∞—Ç: {"url": "...", "alt": "..."}
                    image_paths.append(img_data["url"])
                elif isinstance(img_data, str):
                    # –§–æ—Ä–º–∞—Ç: –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å URL
                    image_paths.append(img_data)
            
            return {"image_paths": image_paths}
        except (json.JSONDecodeError, KeyError) as e:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, –ø—Ä–æ–±—É–µ–º fallback –Ω–∞ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
            pass
    
    # Fallback: –∏—â–µ–º –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
    try:
        actual_model_key = normalize_model_key(model_key)
        normalized_color = normalize_color_name(color)
        
        image_folder = f"static/images/products/{actual_model_key}/{normalized_color}"
        
        if not os.path.exists(image_folder):
            raise HTTPException(
                status_code=404, 
                detail=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: model='{model_key}', color='{color}' (–ø–æ–∏—Å–∫ –≤ –ë–î –∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ)"
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç–∏ –∫ —Ä–µ–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–∞–º
        image_paths = []
        all_files = os.listdir(image_folder)
        jpg_files = [f for f in all_files if f.endswith('.jpg')]
        jpg_files.sort()
        
        for file_name in jpg_files:
            image_path = f"/static/images/products/{actual_model_key}/{normalized_color}/{file_name}"
            image_paths.append(image_path)
                
        return {"image_paths": image_paths}
        
    except Exception as e:
        raise HTTPException(status_code=404, detail=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {str(e)}")

@app.get("/color-schemes/{model_key}")
async def get_color_schemes(model_key: str, db: Session = Depends(get_db)):
    """Get color schemes for a product from database"""
    from models import ModelColorScheme
    
    # –ò—â–µ–º —Å—Ö–µ–º—É —Ü–≤–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    color_scheme = db.query(ModelColorScheme).filter(
        ModelColorScheme.model_key == model_key
    ).first()
    
    if not color_scheme:
        raise HTTPException(status_code=404, detail=f"–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {model_key}")
    
    try:
        # –ü–∞—Ä—Å–∏–º JSON —Å —Ü–≤–µ—Ç–∞–º–∏
        colors_data = json.loads(color_scheme.colors_json)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ)
        default_color = colors_data[0]["value"] if colors_data else ""
        
        return {
            "colors": colors_data,
            "default_color": default_color
        }
    except json.JSONDecodeError:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã")

@app.get("/variant-schemes/{model_key}")
async def get_variant_schemes(model_key: str, db: Session = Depends(get_db)):
    """Get variant schemes for a product from database"""
    from models import ModelVariantScheme
    
    # –ò—â–µ–º —Å—Ö–µ–º—É –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    variant_scheme = db.query(ModelVariantScheme).filter(
        ModelVariantScheme.model_key == model_key
    ).first()
    
    if not variant_scheme:
        raise HTTPException(status_code=404, detail=f"–°—Ö–µ–º–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {model_key}")
    
    try:
        # –ü–∞—Ä—Å–∏–º JSON —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        variants_data = json.loads(variant_scheme.variants_json)
        
        return {
            "variants": variants_data
        }
    except json.JSONDecodeError:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ö–µ–º—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")

# –ù–æ–≤—ã–µ endpoints –¥–ª—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

@app.get("/hierarchy/brands")
async def get_brands(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±—Ä–µ–Ω–¥—ã"""
    brands = db.query(Product.brand.distinct()).filter(
        Product.brand.isnot(None),
        Product.is_available == True
    ).all()
    return [brand[0] for brand in brands]

@app.get("/hierarchy/levels")
async def get_hierarchy_levels(
    level: Optional[int] = None,
    brand: Optional[str] = None,
    parent_level0: Optional[str] = None,
    parent_level1: Optional[str] = None,
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
    
    level: –∫–∞–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—É—á–∏—Ç—å (0, 1, –∏–ª–∏ 2)
    brand: —Ñ–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥—É
    parent_level0: –¥–ª—è —É—Ä–æ–≤–Ω—è 1 - —Ñ–∏–ª—å—Ç—Ä –ø–æ level0
    parent_level1: –¥–ª—è —É—Ä–æ–≤–Ω—è 2 - —Ñ–∏–ª—å—Ç—Ä –ø–æ level1
    """
    
    filters = [Product.is_available == True]
    
    if brand:
        filters.append(Product.brand == brand)
    if parent_level0:
        filters.append(Product.level_0 == parent_level0)
    if parent_level1:
        filters.append(Product.level_1 == parent_level1)
    
    query = db.query(Product).filter(and_(*filters))
    
    if level == 0:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ level_0
        results = query.with_entities(Product.level_0.distinct()).filter(
            Product.level_0.isnot(None)
        ).all()
        return [item[0] for item in results if item[0]]
        
    elif level == 1:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ level_1
        results = query.with_entities(Product.level_1.distinct()).filter(
            Product.level_1.isnot(None)
        ).all()
        return [item[0] for item in results if item[0]]
        
    elif level == 2:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ level_2
        results = query.with_entities(Product.level_2.distinct()).filter(
            Product.level_2.isnot(None)
        ).all()
        return [item[0] for item in results if item[0]]
    
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—é –∏–µ—Ä–∞—Ä—Ö–∏—é
        return {
            "level0": db.query(Product.level_0.distinct()).filter(
                Product.level_0.isnot(None),
                Product.is_available == True
            ).all(),
            "level1": db.query(Product.level_1.distinct()).filter(
                Product.level_1.isnot(None),
                Product.is_available == True
            ).all(),
            "level2": db.query(Product.level_2.distinct()).filter(
                Product.level_2.isnot(None),
                Product.is_available == True
            ).all()
        }

@app.get("/hierarchy/models")
async def get_models(
    brand: Optional[str] = None,
    level0: Optional[str] = None,
    level1: Optional[str] = None,
    level2: Optional[str] = None,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    
    filters = [Product.is_available == True]
    
    if brand:
        filters.append(Product.brand == brand)
    if level0:
        filters.append(Product.level0 == level0)
    if level1:
        filters.append(Product.level1 == level1)
    if level2:
        filters.append(Product.level2 == level2)
    
    models = db.query(Product.level_2.distinct()).filter(
        and_(*filters)
    ).all()
    
    return [model[0] for model in models if model[0]]

@app.get("/hierarchy/skus")
async def get_skus_with_info(
    brand: Optional[str] = None,
    model: Optional[str] = None,
    level0: Optional[str] = None,
    level1: Optional[str] = None,
    level2: Optional[str] = None,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å SKU —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    
    filters = [Product.is_available == True]
    
    if brand:
        filters.append(Product.brand == brand)
    if model:
        filters.append(Product.level_2 == model)
    if level0:
        filters.append(Product.level_0 == level0)
    if level1:
        filters.append(Product.level_1 == level1)
    if level2:
        filters.append(Product.level_2 == level2)
    
    # –ü–æ–ª—É—á–∞–µ–º SKU —Å —Ü–µ–Ω–∞–º–∏
    results = db.query(Product, CurrentPrice).join(
        CurrentPrice, Product.sku == CurrentPrice.sku,
        isouter=True
    ).filter(and_(*filters)).all()
    
    skus_info = []
    for product, price in results:
        sku_data = {
            "sku": product.sku,
            "name": product.name,
            "brand": product.brand,
            "model": product.level_2 or "",
            "level0": product.level_0 or "",
            "level1": product.level_1 or "",
            "level2": product.level_2 or "",
            "price": price.price if price else 0.0,
            "currency": price.currency if price else "RUB",
            "stock": product.stock
        }
        skus_info.append(sku_data)
    
    return skus_info

@app.get("/debug/db-status")
async def debug_db_status(db: Session = Depends(get_db)):
    """Debug endpoint to check database status"""
    try:
        product_count = db.query(Product).count()
        category_count = db.query(Category).count()
        price_count = db.query(CurrentPrice).count()
        
        # Get sample products
        sample_products = db.query(Product).limit(5).all()
        
        return {
            "product_count": product_count,
            "category_count": category_count, 
            "price_count": price_count,
            "sample_products": [
                {
                    "id": p.id,
                    "name": p.name,
                    "model": p.level_2,
                    "sku": p.sku
                } for p in sample_products
            ],
            "database_url": Config.DATABASE_URL,
            "status": "ok"
        }
    except Exception as e:
        return {
            "error": str(e),
            "status": "error"
        }

@app.post("/import-single-product")
async def import_single_product(product_data: dict, db: Session = Depends(get_db)):
    """–î–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ API"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['name', 'brand', 'model']
        for field in required_fields:
            if not product_data.get(field):
                raise HTTPException(status_code=400, detail=f"–ü–æ–ª–µ '{field}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SKU –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        sku = product_data.get('sku')
        if not sku:
            brand_prefix = product_data['brand'][:3].upper()
            sku = f"{brand_prefix}{int(datetime.utcnow().timestamp())}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ SKU —É–Ω–∏–∫–∞–ª–µ–Ω
        existing_product = db.query(Product).filter(Product.sku == sku).first()
        if existing_product:
            raise HTTPException(status_code=400, detail=f"–¢–æ–≤–∞—Ä —Å SKU '{sku}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images_data = product_data.get('images', [])
        if isinstance(images_data, list) and images_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JSON –º–∞—Å—Å–∏–≤
            images_json = json.dumps(images_data)
        else:
            images_json = None
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        specs = dict(product_data.get('specifications') or {})
        if product_data.get('color'):
            specs['color'] = product_data['color']
        if product_data.get('ram'):
            specs['ram'] = product_data['ram']
        if product_data.get('disk'):
            specs['disk'] = product_data['disk']
        if product_data.get('sim_config'):
            specs['sim_config'] = product_data['sim_config']

        new_product = Product(
            name=product_data['name'],
            sku=sku,
            brand=product_data['brand'],
            stock=product_data.get('stock', 0),
            is_available=product_data.get('is_available', True),
            specifications=json.dumps(specs),
            level_0=product_data.get('level0', ''),
            level_1=product_data.get('level1', ''),
            level_2=product_data.get('level2', '')
        )
        
        db.add(new_product)
        db.commit()
        db.refresh(new_product)
        # Ensure categories exist
        ensure_category_exists(db, product_data.get('level0'), product_data.get('level1'), product_data.get('level2'))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
        if 'price' in product_data and product_data['price']:
            price_obj = CurrentPrice(
                product_id=new_product.id,
                price=float(product_data['price']),
                old_price=float(product_data.get('old_price', product_data['price'])),
                currency='RUB',
                discount_percentage=0.0
            )
            db.add(price_obj)
            db.commit()
        
        # –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ ProductImage –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if images_json and product_data.get('level_2') and product_data.get('color'):
            product_image = ProductImage(
                level_2=product_data['level_2'],
                color=product_data['color'],
                img_list=images_json
            )
            db.add(product_image)
            db.commit()
        
        return {
            "success": True,
            "message": f"–¢–æ–≤–∞—Ä '{product_data['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
            "product_id": new_product.id,
            "sku": new_product.sku
        }
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {str(e)}")

@app.get("/export-products")
async def export_all_products(db: Session = Depends(get_db)):
    """–°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –≤ Excel —Å –≤—Å–µ–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏"""
    try:
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏
        results = db.query(Product, CurrentPrice).outerjoin(
            CurrentPrice, Product.sku == CurrentPrice.sku
        ).all()
        
        products_data = []
        for product, price in results:
            try:
                specifications = json.loads(product.specifications) if product.specifications else {}
            except json.JSONDecodeError:
                specifications = {}
            
            # –ü–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            images = get_product_images(product, db)
            
            products_data.append({
                'ID': product.id,
                'SKU': product.sku,
                '–ù–∞–∑–≤–∞–Ω–∏–µ': product.name,
                '–û–ø–∏—Å–∞–Ω–∏–µ': '',  # –ø–æ–ª–µ description —É–¥–∞–ª–µ–Ω–æ
                '–ë—Ä–µ–Ω–¥': product.brand,
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': product.level_0 or '',
                '–£—Ä–æ–≤–µ–Ω—å 0': product.level_0 or '',
                '–£—Ä–æ–≤–µ–Ω—å 1': product.level_1 or '',
                '–£—Ä–æ–≤–µ–Ω—å 2': product.level_2 or '',
                '–¶–≤–µ—Ç': product.color or '',
                '–ü–∞–º—è—Ç—å': product.disk or '',
                'SIM': product.sim_config or '',
                '–¶–µ–Ω–∞': price.price if price else 0.0,
                '–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞': price.old_price if price else (price.price if price else 0.0),
                '–í–∞–ª—é—Ç–∞': price.currency if price else 'RUB',
                '–°–∫–∏–¥–∫–∞ %': price.discount_percentage if price else 0.0,
                '–°–∫–ª–∞–¥': product.stock,
                '–í –Ω–∞–ª–∏—á–∏–∏': '–î–∞' if product.is_available else '–ù–µ—Ç',
                '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è': ' | '.join(images) if images else '',
                '–ö–æ–ª-–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π': len(images),
                '–°–æ–∑–¥–∞–Ω–æ': product.created_at.strftime('%Y-%m-%d %H:%M:%S') if product.created_at else '',
                '–û–±–Ω–æ–≤–ª–µ–Ω–æ': product.updated_at.strftime('%Y-%m-%d %H:%M:%S') if product.updated_at else ''
            })
        
        # –°–æ–∑–¥–∞—Ç—å DataFrame –∏ Excel —Ñ–∞–π–ª
        from io import BytesIO
        
        df = pd.DataFrame(products_data)
        
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç')
            
            # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
            workbook = writer.book
            worksheet = writer.sheets['–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç']
            
            # –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            header_font = openpyxl.styles.Font(bold=True, color="FFFFFF")
            header_fill = openpyxl.styles.PatternFill(start_color="366092", end_color="366092", fill_type="solid")
            
            for cell in worksheet[1]:
                cell.font = header_font
                cell.fill = header_fill
                cell.alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center")
        
        output.seek(0)
        
        return StreamingResponse(
            BytesIO(output.read()),
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            headers={"Content-Disposition": "attachment; filename=assortment_full.xlsx"}
        )
        
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")

@app.get("/export-prices")
async def export_all_prices(db: Session = Depends(get_db)):
    """–°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ü–µ–Ω—ã –≤ Excel"""
    try:
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏
        results = db.query(Product, CurrentPrice).outerjoin(
            CurrentPrice, Product.sku == CurrentPrice.sku
        ).filter(Product.is_available == True).all()
        
        prices_data = []
        for product, price in results:
            if price:  # –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏
                prices_data.append({
                    'SKU': product.sku,
                    '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': product.name,
                    '–ë—Ä–µ–Ω–¥': product.brand,
                    '–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞': price.price,
                    '–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞': price.old_price,
                    '–í–∞–ª—é—Ç–∞': price.currency,
                    '–°–∫–∏–¥–∫–∞ %': f"{price.discount_percentage:.1f}%" if price.discount_percentage else "0%",
                    '–†–∞–∑–Ω–∏—Ü–∞': f"{price.old_price - price.price:.0f}" if price.old_price and price.old_price > price.price else "0",
                    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': product.level_0 or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                    '–í –Ω–∞–ª–∏—á–∏–∏': product.stock,
                    '–û–±–Ω–æ–≤–ª–µ–Ω–æ': price.last_updated.strftime('%Y-%m-%d %H:%M:%S') if hasattr(price, 'last_updated') and price.last_updated else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                })
        
        if not prices_data:
            raise HTTPException(status_code=400, detail="–¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –°–æ–∑–¥–∞—Ç—å DataFrame –∏ Excel —Ñ–∞–π–ª
        from io import BytesIO
        
        df = pd.DataFrame(prices_data)
        
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='–¶–µ–Ω—ã')
            
            # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
            workbook = writer.book
            worksheet = writer.sheets['–¶–µ–Ω—ã']
            
            # –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            header_font = openpyxl.styles.Font(bold=True, color="FFFFFF")
            header_fill = openpyxl.styles.PatternFill(start_color="27ae60", end_color="27ae60", fill_type="solid")
            
            for cell in worksheet[1]:
                cell.font = header_font
                cell.fill = header_fill
                cell.alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center")
        
        output.seek(0)
        
        return StreamingResponse(
            BytesIO(output.read()),
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            headers={"Content-Disposition": "attachment; filename=prices_full.xlsx"}
        )
        
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ü–µ–Ω: {str(e)}")

@app.get("/admin/schemes")
async def get_all_schemes(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ö–µ–º—ã —Ü–≤–µ—Ç–æ–≤ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""
    from models import ModelColorScheme, ModelVariantScheme
    
    color_schemes = db.query(ModelColorScheme).all()
    variant_schemes = db.query(ModelVariantScheme).all()
    
    schemes_data = []
    for color_scheme in color_schemes:
        try:
            colors = json.loads(color_scheme.colors_json)
        except json.JSONDecodeError:
            colors = []
        
        # –ù–∞–π–¥–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ö–µ–º—É –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        variant_scheme = next((v for v in variant_schemes if v.model_key == color_scheme.model_key), None)
        variants = None
        if variant_scheme:
            try:
                variants = json.loads(variant_scheme.variants_json)
            except json.JSONDecodeError:
                variants = {}
        
        schemes_data.append({
            "model_key": color_scheme.model_key,
            "model_name": color_scheme.model_name,
            "brand": color_scheme.brand,
            "colors": colors,
            "variants": variants,
            "created_at": color_scheme.created_at.isoformat() if color_scheme.created_at else None
        })
    
    return {
        "schemes": schemes_data,
        "total": len(schemes_data)
    }

@app.post("/admin/schemes/{model_key}/colors")
async def update_color_scheme(model_key: str, colors_data: dict, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –¥–ª—è –º–æ–¥–µ–ª–∏"""
    from models import ModelColorScheme
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ colors_data —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤
    if "colors" not in colors_data:
        raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'colors'")
    
    colors = colors_data["colors"]
    if not isinstance(colors, list):
        raise HTTPException(status_code=400, detail="–ü–æ–ª–µ 'colors' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
    
    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ö–µ–º—É
    color_scheme = db.query(ModelColorScheme).filter(
        ModelColorScheme.model_key == model_key
    ).first()
    
    if color_scheme:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ö–µ–º—É
        color_scheme.colors_json = json.dumps(colors)
        color_scheme.updated_at = datetime.utcnow()
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ö–µ–º—É
        color_scheme = ModelColorScheme(
            model_key=model_key,
            model_name=colors_data.get("model_name", model_key),
            brand=colors_data.get("brand", "Unknown"),
            colors_json=json.dumps(colors)
        )
        db.add(color_scheme)
    
    db.commit()
    
    return {
        "success": True,
        "message": f"–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è {model_key} –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
        "colors_count": len(colors)
    }

@app.post("/admin/schemes/{model_key}/variants")
async def update_variant_scheme(model_key: str, variants_data: dict, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ö–µ–º—É –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏"""
    from models import ModelVariantScheme
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ variants_data —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if "variants" not in variants_data:
        raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'variants'")
    
    variants = variants_data["variants"]
    if not isinstance(variants, dict):
        raise HTTPException(status_code=400, detail="–ü–æ–ª–µ 'variants' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
    
    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ö–µ–º—É
    variant_scheme = db.query(ModelVariantScheme).filter(
        ModelVariantScheme.model_key == model_key
    ).first()
    
    if variant_scheme:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ö–µ–º—É
        variant_scheme.variants_json = json.dumps(variants)
        variant_scheme.updated_at = datetime.utcnow()
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ö–µ–º—É
        variant_scheme = ModelVariantScheme(
            model_key=model_key,
            model_name=variants_data.get("model_name", model_key),
            brand=variants_data.get("brand", "Unknown"),
            variants_json=json.dumps(variants)
        )
        db.add(variant_scheme)
    
    db.commit()
    
    return {
        "success": True,
        "message": f"–°—Ö–µ–º–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è {model_key} –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
        "variants": list(variants.keys())
    }

@app.put("/products/{product_id}")
async def update_product(product_id: int, product_data: dict, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID"""
    try:
        # –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä
        product = db.query(Product).filter(Product.id == product_id).first()
        
        if not product:
            raise HTTPException(status_code=404, detail=f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
        if 'name' in product_data:
            product.name = product_data['name']
        # if 'description' in product_data:
        #     product.description = product_data['description']  # –ø–æ–ª–µ —É–¥–∞–ª–µ–Ω–æ
        if 'brand' in product_data:
            product.brand = product_data['brand']
        if 'level_0' in product_data:
            product.level_0 = product_data['level_0']
        if 'level_1' in product_data:
            product.level_1 = product_data['level_1']
        if 'level_2' in product_data:
            product.level_2 = product_data['level_2']
        if 'color' in product_data:
            product.color = product_data['color']
        if 'disk' in product_data:
            product.disk = product_data['disk']
        if 'sim_config' in product_data:
            product.sim_config = product_data['sim_config']
        if 'is_available' in product_data:
            product.is_available = product_data['is_available']
        if 'stock' in product_data:
            product.stock = product_data['stock']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã (–≤ —Ç–∞–±–ª–∏—Ü–µ ProductImage)
        if 'img_list' in product_data and product.level_2 and product.color:
            img_list_json = product_data['img_list']
            
            # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ ProductImage
            product_image = db.query(ProductImage).filter(
                ProductImage.level_2 == product.level_2,
                ProductImage.color == product.color
            ).first()
            
            if product_image:
                product_image.img_list = img_list_json
            else:
                product_image = ProductImage(
                    level_2=product.level_2,
                    color=product.color,
                    img_list=img_list_json
                )
                db.add(product_image)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞
        if 'price' in product_data:
            current_price = db.query(CurrentPrice).filter(CurrentPrice.sku == product.sku).first()
            if current_price:
                current_price.price = product_data['price']
                if 'old_price' in product_data:
                    current_price.old_price = product_data['old_price']
                current_price.last_updated = datetime.now()
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                new_price = CurrentPrice(
                    sku=product.sku,
                    price=product_data['price'],
                    old_price=product_data.get('old_price', product_data['price']),
                    currency=product_data.get('currency', 'RUB')
                )
                db.add(new_price)
        
        db.commit()
        db.refresh(product)
        
        return {
            "success": True,
            "message": f"–¢–æ–≤–∞—Ä '{product.name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
            "product": {
                "id": product.id,
                "sku": product.sku,
                "name": product.name,
                "brand": product.brand,
                "model": product.level_2 or "",
                "level_0": product.level_0,
                "level_1": product.level_1,
                "level_2": product.level_2
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {str(e)}")

@app.delete("/products/{product_id}")
async def delete_product(product_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID"""
    try:
        # –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä
        product = db.query(Product).filter(Product.id == product_id).first()
        
        if not product:
            raise HTTPException(status_code=404, detail=f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        product_name = product.name
        product_sku = product.sku
        
        # –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
        db.query(CurrentPrice).filter(CurrentPrice.sku == product_sku).delete()
        
        # –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
        db.delete(product)
        db.commit()
        
        return {
            "success": True,
            "message": f"–¢–æ–≤–∞—Ä '{product_name}' (SKU: {product_sku}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            "deleted_product_id": product_id,
            "deleted_sku": product_sku
        }
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {str(e)}")

@app.delete("/products/by-sku/{sku}")
async def delete_product_by_sku(sku: str, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ SKU"""
    try:
        # –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä
        product = db.query(Product).filter(Product.sku == sku).first()
        
        if not product:
            raise HTTPException(status_code=404, detail=f"–¢–æ–≤–∞—Ä —Å SKU '{sku}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        product_name = product.name
        product_id = product.id
        
        # –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
        db.query(CurrentPrice).filter(CurrentPrice.sku == sku).delete()
        
        # –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
        db.delete(product)
        db.commit()
        
        return {
            "success": True,
            "message": f"–¢–æ–≤–∞—Ä '{product_name}' (SKU: {sku}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            "deleted_product_id": product_id,
            "deleted_sku": sku
        }
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=400, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {str(e)}")

@app.get("/level2-descriptions/{level_2}")
async def get_level2_description(level_2: str, db: Session = Depends(get_db)):
    """Get description and specifications for a level_2 product"""
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –∏—â–µ–º –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
    from sqlalchemy import func
    normalized = (level_2 or "").strip()
    description = db.query(Level2Description).filter(func.lower(Level2Description.level_2) == normalized.lower()).first()
    
    if not description:
        raise HTTPException(status_code=404, detail="Description not found")
    
    # Parse details if it's a JSON string
    details = {}
    if description.details:
        try:
            details = json.loads(description.details) if isinstance(description.details, str) else description.details
        except json.JSONDecodeError:
            details = {}
    
    return {
        "level_2": description.level_2,
        "description": description.description,
        "details": details
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host=Config.HOST, port=Config.PORT)
