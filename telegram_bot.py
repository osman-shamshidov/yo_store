import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from config import Config
import requests
import json

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class ElectronicsStoreBot:
    def __init__(self):
        self.token = Config.TELEGRAM_BOT_TOKEN
        self.api_url = f"http://{Config.HOST}:{Config.PORT}"
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        user = update.effective_user
        welcome_text = f"""
üõçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Yo Store, {user.first_name}!

–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ:
üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã
üíª –ù–æ—É—Ç–±—É–∫–∏  
üéÆ –ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏
üéß –ù–∞—É—à–Ω–∏–∫–∏
üì± –ü–ª–∞–Ω—à–µ—Ç—ã
üîä –£–º–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏

–¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç!
        """
        
        keyboard = [
            [InlineKeyboardButton("üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=f"{self.api_url}/webapp"))],
            [InlineKeyboardButton("üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã", callback_data="category_1")],
            [InlineKeyboardButton("üíª –ù–æ—É—Ç–±—É–∫–∏", callback_data="category_2")],
            [InlineKeyboardButton("üéÆ –ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏", callback_data="category_3")],
            [InlineKeyboardButton("üéß –ù–∞—É—à–Ω–∏–∫–∏", callback_data="category_4")],
            [InlineKeyboardButton("üì± –ü–ª–∞–Ω—à–µ—Ç—ã", callback_data="category_5")],
            [InlineKeyboardButton("üîä –£–º–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏", callback_data="category_6")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_text = """
üÜò –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/categories - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
/search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É
üí° –¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
üí° –ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω" –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        """
        await update.message.reply_text(help_text)
    
    async def categories_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /categories command"""
        try:
            response = requests.get(f"{self.api_url}/categories")
            if response.status_code == 200:
                categories = response.json()
                
                text = "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
                keyboard = []
                
                for category in categories:
                    text += f"{category['icon']} {category['name']} ({category['product_count']} —Ç–æ–≤–∞—Ä–æ–≤)\n"
                    text += f"   {category['description']}\n\n"
                    
                    keyboard.append([InlineKeyboardButton(
                        f"{category['icon']} {category['name']}",
                        callback_data=f"category_{category['id']}"
                    )])
                
                keyboard.append([InlineKeyboardButton("üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=f"{self.api_url}/webapp"))])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(text, reply_markup=reply_markup)
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                
        except Exception as e:
            logger.error(f"Error fetching categories: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
    
    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /search command"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: /search iPhone")
            return
        
        query = " ".join(context.args)
        try:
            response = requests.get(f"{self.api_url}/search", params={"q": query, "limit": 10})
            if response.status_code == 200:
                products = response.json()
                
                if not products:
                    await update.message.reply_text(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return
                
                text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"
                
                for product in products:
                    discount_text = f" (—Å–∫–∏–¥–∫–∞ {product['discount_percentage']:.0f}%)" if product['discount_percentage'] > 0 else ""
                    text += f"üì± {product['name']}\n"
                    text += f"üí∞ {product['price']:,.0f} ‚ÇΩ{discount_text}\n"
                    text += f"üè∑Ô∏è {product['brand']} {product['model']}\n"
                    text += f"üìÇ {product['category_name']}\n\n"
                
                keyboard = [[InlineKeyboardButton("üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=f"{self.api_url}/webapp"))]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(text, reply_markup=reply_markup)
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞")
                
        except Exception as e:
            logger.error(f"Error searching products: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle button callbacks"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("category_"):
            category_id = int(query.data.split("_")[1])
            await self.show_category_products(query, category_id)
    
    async def show_category_products(self, query, category_id: int):
        """Show products in a specific category"""
        try:
            response = requests.get(f"{self.api_url}/products", params={"category_id": category_id, "limit": 10})
            if response.status_code == 200:
                products = response.json()
                
                if not products:
                    await query.edit_message_text("‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
                    return
                
                # Get category name
                category_response = requests.get(f"{self.api_url}/categories")
                category_name = "–¢–æ–≤–∞—Ä—ã"
                if category_response.status_code == 200:
                    categories = category_response.json()
                    for cat in categories:
                        if cat['id'] == category_id:
                            category_name = cat['name']
                            break
                
                text = f"üìÇ {category_name}:\n\n"
                
                for product in products:
                    discount_text = f" (—Å–∫–∏–¥–∫–∞ {product['discount_percentage']:.0f}%)" if product['discount_percentage'] > 0 else ""
                    text += f"üì± {product['name']}\n"
                    text += f"üí∞ {product['price']:,.0f} ‚ÇΩ{discount_text}\n"
                    text += f"üè∑Ô∏è {product['brand']} {product['model']}\n\n"
                
                keyboard = [
                    [InlineKeyboardButton("üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=f"{self.api_url}/webapp"))],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(text, reply_markup=reply_markup)
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤")
                
        except Exception as e:
            logger.error(f"Error fetching category products: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
    
    def run(self):
        """Run the bot"""
        if not self.token:
            logger.error("TELEGRAM_BOT_TOKEN not set!")
            return
        
        application = Application.builder().token(self.token).build()
        
        # Add handlers
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("categories", self.categories_command))
        application.add_handler(CommandHandler("search", self.search_command))
        application.add_handler(CallbackQueryHandler(self.button_callback))
        
        logger.info("Starting bot...")
        application.run_polling()

if __name__ == "__main__":
    bot = ElectronicsStoreBot()
    bot.run()

