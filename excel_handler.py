"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel —Ñ–∞–π–ª–∞–º–∏ (XLSX) –≤ Yo Store
"""

import pandas as pd
import openpyxl
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils.dataframe import dataframe_to_rows
from typing import List, Dict, Any, Optional
import json
from datetime import datetime
import io

class ExcelHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel —Ñ–∞–π–ª–∞–º–∏"""
    
    def __init__(self):
        self.product_columns = [
            'sku', 'name', 'category_id', 'level0', 'level1', 'level2', 'brand', 'model', 
            'price', 'currency', 'stock', 'image_url', 'specifications'
        ]
        
        self.price_columns = [
            'sku', 'name', 'price', 'old_price', 'currency'
        ]
    
    def create_products_template(self) -> bytes:
        """–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω Excel —Ñ–∞–π–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
        wb = Workbook()
        ws = wb.active
        ws.title = "–¢–æ–≤–∞—Ä—ã"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [
            'SKU —Ç–æ–≤–∞—Ä–∞', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*', 'ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*', '–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (level0)', '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è (level1)', '–î–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (level2)', '–ë—Ä–µ–Ω–¥', '–ú–æ–¥–µ–ª—å',
            '–¶–µ–Ω–∞*', '–í–∞–ª—é—Ç–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ', 'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)', '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (JSON)'
        ]
        
        # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = Font(bold=True, color="FFFFFF")
            cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
            cell.alignment = Alignment(horizontal="center", vertical="center")
        
        # –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        examples = [
            ['APP-001-IPHONE15P', '–ù–æ–≤–µ–π—à–∏–π iPhone —Å —Ç–∏—Ç–∞–Ω–æ–≤—ã–º –∫–æ—Ä–ø—É—Å–æ–º', 'iPhone 15 Pro', 1, '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã', '15 Series', '15 Pro', 'Apple', 'iPhone 15 Pro', 
             89990, 'RUB', 10, '/static/images/products/IPHONE15Pro/titanium/1.jpg, /static/images/products/IPHONE15Pro/titanium/2.jpg', '{"color": "Titanium", "storage": "256GB"}'],
            ['APP-002-MACBOOKPROM3', '–ú–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤', 'MacBook Pro M3', 2, '–ù–æ—É—Ç–±—É–∫–∏', 'Pro Series', 'M3', 'Apple', 'MacBook Pro M3', 
             199990, 'RUB', 5, '/static/images/products/MACBOOKProM3/silver/1.jpg, /static/images/products/MACBOOKProM3/silver/2.jpg', '{"screen": "14 inch", "ram": "16GB"}']
        ]
        
        for row, example in enumerate(examples, 2):
            for col, value in enumerate(example, 1):
                ws.cell(row=row, column=col, value=value)
        
        # –î–æ–±–∞–≤–∏—Ç—å –ª–∏—Å—Ç —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        categories_ws = wb.create_sheet("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
        categories_ws.append(['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ò–∫–æ–Ω–∫–∞'])
        
        categories_data = [
            [1, '–¢–µ–ª–µ—Ñ–æ–Ω—ã', '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –∏ –º–æ–±–∏–ª—å–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã', 'üì±'],
            [2, '–ù–æ—É—Ç–±—É–∫–∏', '–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã', 'üíª'],
            [3, '–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏', '–ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å–æ–ª–∏', 'üéÆ'],
            [4, '–ù–∞—É—à–Ω–∏–∫–∏', '–ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', 'üéß'],
            [5, '–ü–ª–∞–Ω—à–µ—Ç—ã', '–ü–ª–∞–Ω—à–µ—Ç–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã', 'üì±'],
            [6, '–£–º–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏', '–ì–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏', 'üîä'],
            [7, '–¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã', '–¢–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏', 'üì∫'],
            [8, '–£–º–Ω—ã–µ —á–∞—Å—ã', '–ù–æ—Å–∏–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', '‚åö']
        ]
        
        for category in categories_data:
            categories_ws.append(category)
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for col in range(1, 5):
            cell = categories_ws.cell(row=1, column=col)
            cell.font = Font(bold=True, color="FFFFFF")
            cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        for ws in wb.worksheets:
            for column in ws.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                ws.column_dimensions[column_letter].width = adjusted_width
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–π—Ç—ã
        output = io.BytesIO()
        wb.save(output)
        output.seek(0)
        return output.getvalue()
    
    def create_prices_template(self) -> bytes:
        """–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω Excel —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω"""
        wb = Workbook()
        ws = wb.active
        ws.title = "–¶–µ–Ω—ã"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [
            'SKU —Ç–æ–≤–∞—Ä–∞*', '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '–ù–æ–≤–∞—è —Ü–µ–Ω–∞*', '–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞', '–í–∞–ª—é—Ç–∞'
        ]
        
        # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = Font(bold=True, color="FFFFFF")
            cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
            cell.alignment = Alignment(horizontal="center", vertical="center")
        
        # –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        examples = [
            ['IPHONE16Pro-256GB-TitaniumNatural', 'iPhone 16 Pro 256GB Titanium Natural', 89990, 99990, 'RUB'],
            ['MACBOOKProM3-512GB-Silver', 'MacBook Pro M3 512GB Silver', 199990, 219990, 'RUB']
        ]
        
        for row, example in enumerate(examples, 2):
            for col, value in enumerate(example, 1):
                ws.cell(row=row, column=col, value=value)
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column_letter].width = adjusted_width
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–π—Ç—ã
        output = io.BytesIO()
        wb.save(output)
        output.seek(0)
        return output.getvalue()
    
    def parse_products_excel(self, file_content: bytes) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç—å Excel —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(io.BytesIO(file_content), sheet_name='–¢–æ–≤–∞—Ä—ã')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            required_columns = ['–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*', 'ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*', '–¶–µ–Ω–∞*']
            missing_columns = [col for col in required_columns if col not in df.columns]
            if missing_columns:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}")
            
            products = []
            errors = []
            
            for index, row in df.iterrows():
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if pd.isna(row['–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*']) or pd.isna(row['ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*']) or pd.isna(row['–¶–µ–Ω–∞*']):
                        continue
                    
                    # –ü–∞—Ä—Å–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                    specifications = {}
                    if not pd.isna(row.get('–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (JSON)', '')):
                        try:
                            specifications = json.loads(str(row['–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (JSON)']))
                        except json.JSONDecodeError:
                            specifications = {}
                    
                    product = {
                        'sku': str(row.get('SKU —Ç–æ–≤–∞—Ä–∞', '')).strip(),
                        'name': str(row['–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*']).strip(),
                        'category_id': int(row['ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏*']),
                        'description': str(row.get('–û–ø–∏—Å–∞–Ω–∏–µ', '')).strip(),
                        'level0': str(row.get('–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (level0)', '')).strip(),
                        'level1': str(row.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è (level1)', '')).strip(),
                        'level2': str(row.get('–ú–æ–¥–µ–ª—å_–¥–µ—Ç–∞–ª—å (level2)', '')).strip(),
                        'brand': str(row.get('–ë—Ä–µ–Ω–¥', '')).strip(),
                        'model': str(row.get('–ú–æ–¥–µ–ª—å', '')).strip(),
                        'price': float(row['–¶–µ–Ω–∞*']),
                        'currency': str(row.get('–í–∞–ª—é—Ç–∞', 'RUB')).strip().upper(),
                        'stock': int(row.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ', 0)) if not pd.isna(row.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ', 0)) else 0,
                        'image_url': str(row.get('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', '')).strip(),
                        'specifications': specifications
                    }
                    
                    products.append(product)
                    
                except Exception as e:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {index + 2}: {str(e)}")
            
            if errors:
                raise ValueError(f"–û—à–∏–±–∫–∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {'; '.join(errors)}")
            
            return products
            
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}")
    
    def parse_prices_excel(self, file_content: bytes) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç—å Excel —Ñ–∞–π–ª —Å —Ü–µ–Ω–∞–º–∏"""
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(io.BytesIO(file_content), sheet_name='–¶–µ–Ω—ã')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            required_columns = ['SKU —Ç–æ–≤–∞—Ä–∞*', '–ù–æ–≤–∞—è —Ü–µ–Ω–∞*']
            missing_columns = [col for col in required_columns if col not in df.columns]
            if missing_columns:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}")
            
            prices = []
            errors = []
            
            for index, row in df.iterrows():
                try:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if pd.isna(row['SKU —Ç–æ–≤–∞—Ä–∞*']) or pd.isna(row['–ù–æ–≤–∞—è —Ü–µ–Ω–∞*']):
                        continue
                    
                    price_data = {
                        'sku': str(row['SKU —Ç–æ–≤–∞—Ä–∞*']).strip(),
                        'name': str(row.get('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '')).strip(),
                        'price': float(row['–ù–æ–≤–∞—è —Ü–µ–Ω–∞*']),
                        'old_price': float(row.get('–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞', row['–ù–æ–≤–∞—è —Ü–µ–Ω–∞*'])),
                        'currency': str(row.get('–í–∞–ª—é—Ç–∞', 'RUB')).strip().upper()
                    }
                    
                    prices.append(price_data)
                    
                except Exception as e:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {index + 2}: {str(e)}")
            
            if errors:
                raise ValueError(f"–û—à–∏–±–∫–∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {'; '.join(errors)}")
            
            return prices
            
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}")
    
    def export_products_to_excel(self, products: List[Dict[str, Any]]) -> bytes:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ Excel —Ñ–∞–π–ª"""
        wb = Workbook()
        ws = wb.active
        ws.title = "–¢–æ–≤–∞—Ä—ã"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [
            'ID', 'SKU', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–£—Ä–æ–≤–µ–Ω—å 0', '–£—Ä–æ–≤–µ–Ω—å 1', '–£—Ä–æ–≤–µ–Ω—å 2', '–ë—Ä–µ–Ω–¥', '–ú–æ–¥–µ–ª—å',
            '–¶–µ–Ω–∞', '–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞', '–í–∞–ª—é—Ç–∞', '–°–∫–∏–¥–∫–∞ %', '–ù–∞ —Å–∫–ª–∞–¥–µ', '–î–æ—Å—Ç—É–ø–µ–Ω', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', '–ö–æ–ª-–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
        ]
        
        # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = Font(bold=True, color="FFFFFF")
            cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
            cell.alignment = Alignment(horizontal="center", vertical="center")
        
        # –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        for row, product in enumerate(products, 2):
            ws.cell(row=row, column=1, value=product.get('id'))
            ws.cell(row=row, column=2, value=product.get('sku'))
            ws.cell(row=row, column=3, value=product.get('name'))
            ws.cell(row=row, column=4, value=product.get('category_name'))
            ws.cell(row=row, column=5, value=product.get('level0'))
            ws.cell(row=row, column=6, value=product.get('level1'))
            ws.cell(row=row, column=7, value=product.get('level2'))
            ws.cell(row=row, column=8, value=product.get('brand'))
            ws.cell(row=row, column=9, value=product.get('model'))
            ws.cell(row=row, column=10, value=product.get('price'))
            ws.cell(row=row, column=11, value=product.get('old_price'))
            ws.cell(row=row, column=12, value=product.get('currency'))
            ws.cell(row=row, column=13, value=product.get('discount_percentage'))
            ws.cell(row=row, column=14, value=product.get('stock'))
            ws.cell(row=row, column=15, value=product.get('is_available'))
            ws.cell(row=row, column=16, value=product.get('image_text'))
            ws.cell(row=row, column=17, value=product.get('images_count'))
            ws.cell(row=row, column=18, value=product.get('created_at'))
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column_letter].width = adjusted_width
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–π—Ç—ã
        output = io.BytesIO()
        wb.save(output)
        output.seek(0)
        return output.getvalue()
