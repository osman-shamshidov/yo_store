#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
"""

import os
import sys
import json

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import init_database, create_tables, SessionLocal
from models import Category, Product, CurrentPrice

def create_full_product_catalog():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    create_tables()
    
    db = SessionLocal()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        if db.query(Product).count() > 0:
            print("–ë–∞–∑a –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–≤–∞—Ä—ã")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories_data = [
            {"name": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã", "description": "–ú–æ–±–∏–ª—å–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã", "icon": "üì±"},
            {"name": "–ù–æ—É—Ç–±—É–∫–∏", "description": "–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã", "icon": "üíª"},
            {"name": "–ù–∞—É—à–Ω–∏–∫–∏", "description": "–ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "icon": "üéß"},
            {"name": "–ü–ª–∞–Ω—à–µ—Ç—ã", "description": "–ü–ª–∞–Ω—à–µ—Ç–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã", "icon": "üì±"},
            {"name": "–£–º–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏", "description": "–ì–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏", "icon": "üîä"},
            {"name": "–î—Ä—É–≥–æ–µ", "description": "–ü—Ä–æ—á–µ–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "icon": "‚öôÔ∏è"},
        ]
        
        categories = []
        for cat_data in categories_data:
            category = Category(**cat_data)
            db.add(category)
            categories.append(category)
        
        db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        smartphon_category_id = categories[0].id  # –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã
        laptop_category_id = categories[1].id      # –ù–æ—É—Ç–±—É–∫–∏
        headphones_category_id = categories[2].id # –ù–∞—É—à–Ω–∏–∫–∏
        tablet_category_id = categories[3].id      # –ü–ª–∞–Ω—à–µ—Ç—ã
        speaker_category_id = categories[4].id     # –ö–æ–ª–æ–Ω–∫–∏
        other_category_id = categories[5].id      # –î—Ä—É–≥–æ–µ
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        products_data = [
            # iPhone 16
            {
                "name": "iPhone 16",
                "description": "–ù–æ–≤–µ–π—à–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω Apple —Å —á–∏–ø–æ–º A18",
                "brand": "Apple",
                "model": "iPhone 16",
                "category_id": smartphon_category_id,
                "level0": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã Apple",
                "level1": "iPhone",
                "level2": "iPhone 16",
                "sku": "IPHONE16-001",
                "image_url": "/static/images/products/IPHONE16/black/0nezbz8sc7xr6vzyjmw7tjzx9al17n95.jpg",
                "images": json.dumps(["/static/images/products/IPHONE16/black/0nezbz8sc7xr6vzyjmw7tjzx9al17n95.jpg"]),
                "specifications": json.dumps({
                    "color": "Black",
                    "storage": "128GB",
                    "screen": "6.1 inch",
                    "camera": "48MP",
                    "connector": "USB-C"
                }),
                "is_available": True,
                "price": 89990.0
            },
            # iPhone 17 Pro Max
            {
                "name": "iPhone 17 Pro Max",
                "description": "–§–ª–∞–≥–º–∞–Ω—Å–∫–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω Apple —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∫–∞–º–µ—Ä–æ–π",
                "brand": "Apple",
                "model": "iPhone 17 Pro Max",
                "category_id": smartphon_category_id,
                "level0": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã Apple",
                "level1": "iPhone",
                "level2": "iPhone 17 Pro Max",
                "sku": "IPHONE17ProMax-001",
                "image_url": "/static/images/products/IPHONE17ProMax/cosmic-orange/1v3gv6779mtz9d5vp32dzy1f5jh59yz1s.jpg",
                "images": json.dumps(["/static/images/products/IPHONE17ProMax/cosmic-orange/1v3gv6779mtz9d5vp32dzy1f5jh59yz1s.jpg"]),
                "specifications": json.dumps({
                    "color": "Cosmic Orange",
                    "storage": "256GB",
                    "screen": "6.9 inch",
                    "camera": "60MP Pro Max",
                    "processor": "A19 Pro"
                }),
                "is_available": True,
                "price": 129990.0
            },
            # MacBook Air M2
            {
                "name": "MacBook Air M2",
                "description": "–£–ª—å—Ç—Ä–∞—Ç–æ–Ω–∫–∏–π –Ω–æ—É—Ç–±—É–∫ —Å —á–∏–ø–æ–º M2",
                "brand": "Apple",
                "model": "MacBook Air M2",
                "category_id": laptop_category_id,
                "level0": "–ù–æ—É—Ç–±—É–∫–∏ Apple",
                "level1": "MacBook",
                "level2": "MacBook Air M2",
                "sku": "MACBOOKAIRM2-001",
                "image_url": "/static/images/products/MACBOOKAirM2/silver/1.jpg",
                "images": json.dumps(["/static/images/products/MACBOOKAirM2/silver/1.jpg"]),
                "specifications": json.dumps({
                    "color": "Silver",
                    "storage": "256GB SSD",
                    "screen": "13.6 inch Liquid Retina",
                    "processor": "Apple M2",
                    "memory": "8GB Unified Memory"
                }),
                "is_available": True,
                "price": 119990.0
            }
        ]
        
        for prod_data in products_data:
            price = prod_data.pop('price')
            product = Product(**prod_data)
            db.add(product)
            db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = CurrentPrice(
                product_id=product.id,
                price=price,
                old_price=price * 1.15,  # –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ –Ω–∞ 15% –≤—ã—à–µ
                discount_percentage=15.0,
                currency="RUB",
                updated_at=db.query(CurrentPrice).count()  # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞—Ç—å timestamp
            )
            db.add(current_price)
        
        db.commit()
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    create_full_product_catalog()
